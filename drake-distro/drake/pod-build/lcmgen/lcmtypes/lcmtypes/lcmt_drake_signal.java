/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_drake_signal implements lcm.lcm.LCMEncodable
{
    public int dim;
    public double val[];
    public String coord[];
    public long timestamp;
 
    public lcmt_drake_signal()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x236e73ecd6fc3932L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.lcmt_drake_signal.class))
            return 0L;
 
        classes.add(lcmtypes.lcmt_drake_signal.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.dim); 
 
        for (int a = 0; a < this.dim; a++) {
            outs.writeDouble(this.val[a]); 
        }
 
        for (int a = 0; a < this.dim; a++) {
            __strbuf = new char[this.coord[a].length()]; this.coord[a].getChars(0, this.coord[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        outs.writeLong(this.timestamp); 
 
    }
 
    public lcmt_drake_signal(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_drake_signal(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.lcmt_drake_signal _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.lcmt_drake_signal o = new lcmtypes.lcmt_drake_signal();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.dim = ins.readInt();
 
        this.val = new double[(int) dim];
        for (int a = 0; a < this.dim; a++) {
            this.val[a] = ins.readDouble();
        }
 
        this.coord = new String[(int) dim];
        for (int a = 0; a < this.dim; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.coord[a] = new String(__strbuf);
        }
 
        this.timestamp = ins.readLong();
 
    }
 
    public lcmtypes.lcmt_drake_signal copy()
    {
        lcmtypes.lcmt_drake_signal outobj = new lcmtypes.lcmt_drake_signal();
        outobj.dim = this.dim;
 
        outobj.val = new double[(int) dim];
        if (this.dim > 0)
            System.arraycopy(this.val, 0, outobj.val, 0, this.dim); 
        outobj.coord = new String[(int) dim];
        if (this.dim > 0)
            System.arraycopy(this.coord, 0, outobj.coord, 0, this.dim); 
        outobj.timestamp = this.timestamp;
 
        return outobj;
    }
 
}

