/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_scope_data implements lcm.lcm.LCMEncodable
{
    public long scope_id;
    public int num_points;
    public String linespec;
    public boolean resetOnXval;
    public double xdata;
    public double ydata;
 
    public lcmt_scope_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xce3bf247025afc2fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_scope_data.class))
            return 0L;
 
        classes.add(drake.lcmt_scope_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.scope_id); 
 
        outs.writeInt(this.num_points); 
 
        __strbuf = new char[this.linespec.length()]; this.linespec.getChars(0, this.linespec.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.resetOnXval ? 1 : 0); 
 
        outs.writeDouble(this.xdata); 
 
        outs.writeDouble(this.ydata); 
 
    }
 
    public lcmt_scope_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_scope_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_scope_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_scope_data o = new drake.lcmt_scope_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.scope_id = ins.readLong();
 
        this.num_points = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.linespec = new String(__strbuf);
 
        this.resetOnXval = ins.readByte()!=0;
 
        this.xdata = ins.readDouble();
 
        this.ydata = ins.readDouble();
 
    }
 
    public drake.lcmt_scope_data copy()
    {
        drake.lcmt_scope_data outobj = new drake.lcmt_scope_data();
        outobj.scope_id = this.scope_id;
 
        outobj.num_points = this.num_points;
 
        outobj.linespec = this.linespec;
 
        outobj.resetOnXval = this.resetOnXval;
 
        outobj.xdata = this.xdata;
 
        outobj.ydata = this.ydata;
 
        return outobj;
    }
 
}

