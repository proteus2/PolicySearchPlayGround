/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_robot_state implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int num_robots;
    public String robot_name[];
    public int num_joints;
    public int joint_robot[];
    public String joint_name[];
    public float joint_position[];
    public float joint_velocity[];
 
    public lcmt_robot_state()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5ee54c65cb66563dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_robot_state.class))
            return 0L;
 
        classes.add(drake.lcmt_robot_state.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.num_robots); 
 
        for (int a = 0; a < this.num_robots; a++) {
            __strbuf = new char[this.robot_name[a].length()]; this.robot_name[a].getChars(0, this.robot_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        outs.writeInt(this.num_joints); 
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeInt(this.joint_robot[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[this.joint_name[a].length()]; this.joint_name[a].getChars(0, this.joint_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeFloat(this.joint_position[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeFloat(this.joint_velocity[a]); 
        }
 
    }
 
    public lcmt_robot_state(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_robot_state(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_robot_state _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_robot_state o = new drake.lcmt_robot_state();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp = ins.readLong();
 
        this.num_robots = ins.readInt();
 
        this.robot_name = new String[(int) num_robots];
        for (int a = 0; a < this.num_robots; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.robot_name[a] = new String(__strbuf);
        }
 
        this.num_joints = ins.readInt();
 
        this.joint_robot = new int[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.joint_robot[a] = ins.readInt();
        }
 
        this.joint_name = new String[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.joint_name[a] = new String(__strbuf);
        }
 
        this.joint_position = new float[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.joint_position[a] = ins.readFloat();
        }
 
        this.joint_velocity = new float[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.joint_velocity[a] = ins.readFloat();
        }
 
    }
 
    public drake.lcmt_robot_state copy()
    {
        drake.lcmt_robot_state outobj = new drake.lcmt_robot_state();
        outobj.timestamp = this.timestamp;
 
        outobj.num_robots = this.num_robots;
 
        outobj.robot_name = new String[(int) num_robots];
        if (this.num_robots > 0)
            System.arraycopy(this.robot_name, 0, outobj.robot_name, 0, this.num_robots); 
        outobj.num_joints = this.num_joints;
 
        outobj.joint_robot = new int[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_robot, 0, outobj.joint_robot, 0, this.num_joints); 
        outobj.joint_name = new String[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_name, 0, outobj.joint_name, 0, this.num_joints); 
        outobj.joint_position = new float[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_position, 0, outobj.joint_position, 0, this.num_joints); 
        outobj.joint_velocity = new float[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_velocity, 0, outobj.joint_velocity, 0, this.num_joints); 
        return outobj;
    }
 
}

