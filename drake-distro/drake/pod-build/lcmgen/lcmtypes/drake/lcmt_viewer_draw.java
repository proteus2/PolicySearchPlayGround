/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_viewer_draw implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int num_links;
    public String link_name[];
    public int robot_num[];
    public float position[][];
    public float quaternion[][];
 
    public lcmt_viewer_draw()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x20a785ff2d97a122L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_viewer_draw.class))
            return 0L;
 
        classes.add(drake.lcmt_viewer_draw.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.num_links); 
 
        for (int a = 0; a < this.num_links; a++) {
            __strbuf = new char[this.link_name[a].length()]; this.link_name[a].getChars(0, this.link_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_links; a++) {
            outs.writeInt(this.robot_num[a]); 
        }
 
        for (int a = 0; a < this.num_links; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.position[a][b]); 
            }
        }
 
        for (int a = 0; a < this.num_links; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeFloat(this.quaternion[a][b]); 
            }
        }
 
    }
 
    public lcmt_viewer_draw(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_viewer_draw(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_viewer_draw _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_viewer_draw o = new drake.lcmt_viewer_draw();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp = ins.readLong();
 
        this.num_links = ins.readInt();
 
        this.link_name = new String[(int) num_links];
        for (int a = 0; a < this.num_links; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.link_name[a] = new String(__strbuf);
        }
 
        this.robot_num = new int[(int) num_links];
        for (int a = 0; a < this.num_links; a++) {
            this.robot_num[a] = ins.readInt();
        }
 
        this.position = new float[(int) num_links][(int) 3];
        for (int a = 0; a < this.num_links; a++) {
            for (int b = 0; b < 3; b++) {
                this.position[a][b] = ins.readFloat();
            }
        }
 
        this.quaternion = new float[(int) num_links][(int) 4];
        for (int a = 0; a < this.num_links; a++) {
            for (int b = 0; b < 4; b++) {
                this.quaternion[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public drake.lcmt_viewer_draw copy()
    {
        drake.lcmt_viewer_draw outobj = new drake.lcmt_viewer_draw();
        outobj.timestamp = this.timestamp;
 
        outobj.num_links = this.num_links;
 
        outobj.link_name = new String[(int) num_links];
        if (this.num_links > 0)
            System.arraycopy(this.link_name, 0, outobj.link_name, 0, this.num_links); 
        outobj.robot_num = new int[(int) num_links];
        if (this.num_links > 0)
            System.arraycopy(this.robot_num, 0, outobj.robot_num, 0, this.num_links); 
        outobj.position = new float[(int) num_links][(int) 3];
        for (int a = 0; a < this.num_links; a++) {
            System.arraycopy(this.position[a], 0, outobj.position[a], 0, 3);        }
 
        outobj.quaternion = new float[(int) num_links][(int) 4];
        for (int a = 0; a < this.num_links; a++) {
            System.arraycopy(this.quaternion[a], 0, outobj.quaternion[a], 0, 4);        }
 
        return outobj;
    }
 
}

