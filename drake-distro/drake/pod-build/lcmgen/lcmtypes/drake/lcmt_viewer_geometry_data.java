/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_viewer_geometry_data implements lcm.lcm.LCMEncodable
{
    public byte type;
    public float position[];
    public float quaternion[];
    public float color[];
    public String string_data;
    public int num_float_data;
    public float float_data[];
 
    public lcmt_viewer_geometry_data()
    {
        position = new float[3];
        quaternion = new float[4];
        color = new float[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xae971a65992bed83L;
 
    public static final byte BOX = (byte) 1;
    public static final byte SPHERE = (byte) 2;
    public static final byte CYLINDER = (byte) 3;
    public static final byte MESH = (byte) 4;
    public static final byte CAPSULE = (byte) 5;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_viewer_geometry_data.class))
            return 0L;
 
        classes.add(drake.lcmt_viewer_geometry_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte(this.type); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.position[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.quaternion[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.color[a]); 
        }
 
        __strbuf = new char[this.string_data.length()]; this.string_data.getChars(0, this.string_data.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.num_float_data); 
 
        for (int a = 0; a < this.num_float_data; a++) {
            outs.writeFloat(this.float_data[a]); 
        }
 
    }
 
    public lcmt_viewer_geometry_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_viewer_geometry_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_viewer_geometry_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_viewer_geometry_data o = new drake.lcmt_viewer_geometry_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.type = ins.readByte();
 
        this.position = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.position[a] = ins.readFloat();
        }
 
        this.quaternion = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quaternion[a] = ins.readFloat();
        }
 
        this.color = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.color[a] = ins.readFloat();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.string_data = new String(__strbuf);
 
        this.num_float_data = ins.readInt();
 
        this.float_data = new float[(int) num_float_data];
        for (int a = 0; a < this.num_float_data; a++) {
            this.float_data[a] = ins.readFloat();
        }
 
    }
 
    public drake.lcmt_viewer_geometry_data copy()
    {
        drake.lcmt_viewer_geometry_data outobj = new drake.lcmt_viewer_geometry_data();
        outobj.type = this.type;
 
        outobj.position = new float[(int) 3];
        System.arraycopy(this.position, 0, outobj.position, 0, 3); 
        outobj.quaternion = new float[(int) 4];
        System.arraycopy(this.quaternion, 0, outobj.quaternion, 0, 4); 
        outobj.color = new float[(int) 4];
        System.arraycopy(this.color, 0, outobj.color, 0, 4); 
        outobj.string_data = this.string_data;
 
        outobj.num_float_data = this.num_float_data;
 
        outobj.float_data = new float[(int) num_float_data];
        if (this.num_float_data > 0)
            System.arraycopy(this.float_data, 0, outobj.float_data, 0, this.num_float_data); 
        return outobj;
    }
 
}

