/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_viewer_command implements lcm.lcm.LCMEncodable
{
    public byte command_type;
    public String command_data;
 
    public lcmt_viewer_command()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7878fb2792b4a897L;
 
    public static final byte STATUS = (byte) 0;
    public static final byte LOAD_MODEL = (byte) 1;
    public static final byte LOAD_RENDERER = (byte) 2;
    public static final byte SHUTDOWN = (byte) 3;
    public static final byte START_RECORDING = (byte) 4;
    public static final byte STOP_RECORDING = (byte) 5;
    public static final byte LOAD_TERRAIN = (byte) 6;
    public static final byte SET_TERRAIN_TRANSFORM = (byte) 7;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_viewer_command.class))
            return 0L;
 
        classes.add(drake.lcmt_viewer_command.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte(this.command_type); 
 
        __strbuf = new char[this.command_data.length()]; this.command_data.getChars(0, this.command_data.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public lcmt_viewer_command(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_viewer_command(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_viewer_command _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_viewer_command o = new drake.lcmt_viewer_command();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.command_type = ins.readByte();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.command_data = new String(__strbuf);
 
    }
 
    public drake.lcmt_viewer_command copy()
    {
        drake.lcmt_viewer_command outobj = new drake.lcmt_viewer_command();
        outobj.command_type = this.command_type;
 
        outobj.command_data = this.command_data;
 
        return outobj;
    }
 
}

